---
// src/components/AuthForm.astro
import { supabase } from "../lib/supabase"; // Import Supabase client

// Prop for initial mode
interface Props {
    initialMode: 'login' | 'register';
}
const { initialMode } = Astro.props;

// Define accent color in frontmatter
const accentColor = "#E91E63";

// Handle form submission on the server (Astro best practice)
let formMessage = '';
let formSuccess = false;

if (Astro.request.method === "POST") {
    console.log("Headers recibidos:", Astro.request.headers); // Log para ver cabeceras
    console.log("Content-Type recibido:", Astro.request.headers.get('content-type')); // Log específico
    try {
        const formData = await Astro.request.formData();
        const mode = formData.get('mode') as string; // Hidden input to know if it's login or register

        if (mode === 'register') {
            const email = formData.get('email') as string;
            const password = formData.get('password') as string;
            const name = formData.get('name') as string;
            const phone = formData.get('phone') as string; // Add phone input if needed
            const confirmPassword = formData.get('confirm-password') as string;

            if (password !== confirmPassword) {
                throw new Error("Passwords do not match.");
            }

            // Basic validation (add more as needed)
            if (!email || !password || !name) {
                 throw new Error("Please fill in all required fields.");
            }

            // --- SUPABASE REGISTRATION LOGIC ---
            // Note: Supabase Auth (signUp) is preferred for user creation
            // This example inserts directly into a 'usuarios' table as per your script
            const { data, error } = await supabase.from('usuarios').insert([{
                nombre: name,
                correo: email,
                contrasena: password, // IMPORTANT: Storing plain passwords is insecure! Use Supabase Auth or hash passwords.
                numerotelefono: phone || null // Handle optional phone
            }]).select(); // Use select() to get back the inserted data or error info

            if (error) {
                console.error("Supabase insert error:", error);
                throw new Error(error.message || "Failed to create account. Please try again.");
            }

            console.log("Supabase insert success:", data);
            formMessage = "Account created successfully! You can now log in.";
            formSuccess = true;
            // Optionally redirect or change UI state further

        } else {
             // --- LOGIN LOGIC (Placeholder) ---
             // Implement Supabase signInWithPassword or other login methods here
             console.log("Login attempt (implement Supabase login)");
             // const email = formData.get('email') as string;
             // const password = formData.get('password') as string;
             // const { error } = await supabase.auth.signInWithPassword({ email, password });
             // Handle login success/error
             formMessage = "Login functionality not yet implemented."; // Placeholder message
        }

    } catch (error: any) {
        console.error("Form submission error:", error);
        formMessage = error.message || "An error occurred.";
        formSuccess = false;
    }
}
---

<section class="py-16 bg-gray-50 flex items-center justify-center min-h-screen-minus-header">
    <div class="w-full max-w-lg bg-white rounded-2xl shadow-xl p-8">

        <h1 class="text-3xl font-extrabold text-gray-900 mb-2">Autenticación</h1>
        <p class="text-gray-600 mb-6">Accede a tu cuenta o crea una nueva</p>

        {formMessage && (
            <div class={`mb-4 p-3 rounded-lg text-sm ${formSuccess ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'}`}>
                {formMessage}
            </div>
        )}

        <div class="flex p-1 bg-gray-100 rounded-xl mb-8 font-medium">
            <button
                data-mode="login"
                class:list={[
                    "tab-button flex-1 py-3 px-4 rounded-xl transition-colors duration-200",
                    initialMode === 'login' ? 'bg-white shadow-md text-gray-900' : 'text-gray-600'
                ]}
                aria-label="Iniciar Sesión"
            >
                Iniciar Sesión
            </button>
            <button
                data-mode="register"
                class:list={[
                     "tab-button flex-1 py-3 px-4 rounded-xl transition-colors duration-200",
                     initialMode === 'register' ? 'bg-white shadow-md text-gray-900' : 'text-gray-600'
                 ]}
                aria-label="Registrarse"
            >
                Registrarse
            </button>
        </div>

        <form id="auth-form" method="POST" class="space-y-6">
             <input type="hidden" name="mode" id="form-mode" value={initialMode} />

            <div id="name-field" class:list={["space-y-1", { 'hidden': initialMode === 'login' }]}>
                <label for="name" class="block text-sm font-bold text-gray-700">Nombre Completo</label>
                <input
                    type="text"
                    id="name"
                    name="name"
                    placeholder="Tu nombre"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-600"
                />
            </div>

            <div class="space-y-1">
                <label for="email" class="block text-sm font-bold text-gray-700">Correo Electrónico</label>
                <input
                    type="email"
                    id="email"
                    name="email"
                    placeholder="tu@email.com"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-600"
                />
            </div>

             <div id="phone-field" class:list={["space-y-1", { 'hidden': initialMode === 'login' }]}>
                <label for="phone" class="block text-sm font-bold text-gray-700">Teléfono (Opcional)</label>
                <input
                    type="tel"
                    id="phone"
                    name="phone"
                    placeholder="+52 55 1234 5678"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-600"
                />
            </div>

            <div class="space-y-1">
                <label for="password" class="block text-sm font-bold text-gray-700">Contraseña</label>
                <input
                    type="password"
                    id="password"
                    name="password"
                    placeholder="••••••••"
                    required
                    minlength="6"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-600"
                />
            </div>

            <div id="confirm-password-field" class:list={["space-y-1", { 'hidden': initialMode === 'login' }]}>
                <label for="confirm-password" class="block text-sm font-bold text-gray-700">Confirmar Contraseña</label>
                <input
                    type="password"
                    id="confirm-password"
                    name="confirm-password"
                    placeholder="••••••••"
                    minlength="6"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-pink-600"
                />
            </div>

            <div>
                <button id="submit-button" type="submit" class="btn-primary w-full py-3 rounded-xl font-bold text-white text-lg shadow-lg">
                    {/* Text updates via client-side script */}
                    {initialMode === 'login' ? 'Iniciar Sesión' : 'Crear Cuenta'}
                </button>
            </div>
        </form>
    </div>
</section>

<script define:vars={{ initialMode }}>
    // @ts-nocheck
    const nameField = document.getElementById('name-field');
    const phoneField = document.getElementById('phone-field'); // Get phone field
    const confirmPasswordField = document.getElementById('confirm-password-field');
    const submitButton = document.getElementById('submit-button');
    const tabs = document.querySelectorAll('.tab-button');
    const formModeInput = document.getElementById('form-mode');

    // Input fields for required attribute toggling
    const nameInput = document.getElementById('name');
    const confirmPasswordInput = document.getElementById('confirm-password');

    function updateUI(mode) {
        formModeInput.value = mode; // Update hidden input

        tabs.forEach(tab => {
            const isCurrent = tab.dataset.mode === mode;
            tab.classList.toggle('bg-white', isCurrent);
            tab.classList.toggle('shadow-md', isCurrent);
            tab.classList.toggle('text-gray-900', isCurrent);
            tab.classList.toggle('text-gray-600', !isCurrent);
        });

        const isRegister = mode === 'register';
        nameField.classList.toggle('hidden', !isRegister);
        phoneField.classList.toggle('hidden', !isRegister); // Toggle phone field
        confirmPasswordField.classList.toggle('hidden', !isRegister);
        submitButton.textContent = isRegister ? 'Crear Cuenta' : 'Iniciar Sesión';

        // Toggle required attributes for client-side validation hints
        if (nameInput) nameInput.required = isRegister;
        if (confirmPasswordInput) confirmPasswordInput.required = isRegister;

        // Update URL without reloading (optional, for bookmarking/sharing state)
        // const url = new URL(window.location);
        // url.searchParams.set('mode', mode);
        // window.history.pushState({}, '', url);
    }

    // Initial UI setup based on prop
    updateUI(initialMode);

    // Add listeners to tabs
    tabs.forEach(tab => {
        tab.addEventListener('click', () => {
            updateUI(tab.dataset.mode);
        });
    });

    // You can add client-side validation here if needed,
    // e.g., checking if passwords match before allowing submission.
    const form = document.getElementById('auth-form');
    if (form) {
        form.addEventListener('submit', (event) => {
            if (formModeInput.value === 'register') {
                const password = document.getElementById('password').value;
                const confirm = document.getElementById('confirm-password').value;
                if (password !== confirm) {
                    event.preventDefault(); // Stop submission
                    alert("Passwords do not match!"); // Simple feedback
                    // You could display this message more elegantly within the form
                }
            }
             // Add other client-side validation if desired
        });
    }
</script>

<style define:vars={{ accentColor }}>
    /* Example: Style focus rings with accent color if Tailwind isn't doing it */
    input:focus {
         /* Tailwind usually handles this with ring utilities */
        /* box-shadow: 0 0 0 3px color-mix(in srgb, var(--accentColor) 20%, transparent);
        border-color: var(--accentColor); */
    }
    .btn-primary {
         background: linear-gradient(135deg, #FF4081 0%, var(--accentColor, #E91E63) 100%);
         /* Add other primary button styles */
    }
     .btn-primary:hover {
        background: linear-gradient(135deg, var(--accentColor, #E91E63) 0%, #C2185B 100%);
         /* Add other hover styles */
    }
</style>